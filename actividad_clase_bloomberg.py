# -*- coding: utf-8 -*-
"""Actividad Clase Bloomberg

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ATsNNvTS2K2N3TLg4YR67HBGEiOJUmGr
"""

# Install libraries
!pip install statsmodels pandas openpyxl

# Import libraries
import pandas as pd
import numpy as np
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, coint
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
from google.colab import files

# Upload files
print("Please upload '3 MIN.xlsx' and '1 MIN.xlsx'")
uploaded = files.upload()

# Load files with header
df_3min = pd.read_excel('3 MIN.xlsx', header=0)
df_1min = pd.read_excel('1 MIN.xlsx', header=0)

# Print first few rows
print("3 MIN.xlsx head:\n", df_3min.head())
print("1 MIN.xlsx head:\n", df_1min.head())

# Process data
def process_data(df):
    try:
        tsla = pd.to_numeric(df.iloc[:, 1], errors='coerce')  # Column 1
        nvda = pd.to_numeric(df.iloc[:, 4], errors='coerce')  # Column 4
        aapl = pd.to_numeric(df.iloc[:, 7], errors='coerce')  # Column 7
        data = pd.DataFrame({
            'TSLA': tsla.values,
            'NVDA': nvda.values,
            'AAPL': aapl.values
        }).dropna()
        print(f"Processed data shape: {data.shape}")
        return data
    except Exception as e:
        print(f"Error processing data: {e}")
        return None

data_3min = process_data(df_3min)
data_1min = process_data(df_1min)

# Check if data was loaded
if data_3min is None or data_1min is None:
    print("Data processing failed. Check file structure.")
else:
    print("3-min data preview:\n", data_3min.head())
    print("1-min data preview:\n", data_1min.head())

    # Unit Root Test (Augmented Dickey-Fuller)
    def adf_test(series, name):
        result = adfuller(series, autolag='AIC')
        print(f'\nADF Test for {name}:')
        print(f'ADF Statistic: {result[0]}')
        print(f'p-value: {result[1]}')
        print(f'Critical Values: {result[4]}')
        if result[1] < 0.05:
            print(f'{name} is stationary (reject null hypothesis)')
        else:
            print(f'{name} is non-stationary (fail to reject null hypothesis)')

    print("\n=== 3-Minute Data ===")
    for stock in data_3min.columns:
        adf_test(data_3min[stock], f"{stock} (3-min)")

    print("\n=== 1-Minute Data ===")
    for stock in data_1min.columns:
        adf_test(data_1min[stock], f"{stock} (1-min)")

    # Difference the data if non-stationary
    data_3min_diff = data_3min.diff().dropna()
    data_1min_diff = data_1min.diff().dropna()

    print("\n=== 3-Minute Differenced Data ===")
    for stock in data_3min_diff.columns:
        adf_test(data_3min_diff[stock], f"{stock} Differenced (3-min)")

    print("\n=== 1-Minute Differenced Data ===")
    for stock in data_1min_diff.columns:
        adf_test(data_1min_diff[stock], f"{stock} Differenced (1-min)")

    # ARMA Model
    def fit_arma(series, name, order=(1, 0, 1)):
        try:
            model = ARIMA(series, order=order).fit()
            print(f'\nARMA Model Summary for {name}:')
            print(model.summary())
            residuals = model.resid
            plt.figure(figsize=(10, 4))
            plt.plot(residuals)
            plt.title(f'Residuals of ARMA Model for {name}')
            plt.show()
            return model
        except Exception as e:
            print(f'Error fitting ARMA model for {name}: {e}')
            return None

    print("\n=== ARMA Models for 3-Minute Differenced Data ===")
    arma_models_3min = {}
    for stock in data_3min_diff.columns:
        arma_models_3min[stock] = fit_arma(data_3min_diff[stock], f"{stock} (3-min)")

    print("\n=== ARMA Models for 1-Minute Differenced Data ===")
    arma_models_1min = {}
    for stock in data_1min_diff.columns:
        arma_models_1min[stock] = fit_arma(data_1min_diff[stock], f"{stock} (1-min)")

    # Cointegration Test
    def engle_granger_coint_test(series1, series2, name1, name2):
        score, p_value, _ = coint(series1, series2)
        print(f'\nEngle-Granger Cointegration Test: {name1} vs {name2}')
        print(f'Test Statistic: {score}')
        print(f'p-value: {p_value}')
        if p_value < 0.05:
            print(f'{name1} and {name2} are cointegrated')
        else:
            print(f'{name1} and {name2} are not cointegrated')

    print("\n=== Pairwise Cointegration Tests (3-Minute Data) ===")
    engle_granger_coint_test(data_3min['TSLA'], data_3min['NVDA'], 'TSLA', 'NVDA')
    engle_granger_coint_test(data_3min['TSLA'], data_3min['AAPL'], 'TSLA', 'AAPL')
    engle_granger_coint_test(data_3min['NVDA'], data_3min['AAPL'], 'NVDA', 'AAPL')

    print("\n=== Pairwise Cointegration Tests (1-Minute Data) ===")
    engle_granger_coint_test(data_1min['TSLA'], data_1min['NVDA'], 'TSLA', 'NVDA')
    engle_granger_coint_test(data_1min['TSLA'], data_1min['AAPL'], 'TSLA', 'AAPL')
    engle_granger_coint_test(data_1min['NVDA'], data_1min['AAPL'], 'NVDA', 'AAPL')

    # Johansen Cointegration Test
    def johansen_coint_test(data, det_order=0, k_ar_diff=1):
        from statsmodels.tsa.vector_ar.vecm import coint_johansen
        result = coint_johansen(data, det_order, k_ar_diff)
        print('\nJohansen Cointegration Test:')
        print('Trace Statistic:')
        for i in range(len(result.lr1)):
            print(f'r <= {i}: {result.lr1[i]} (Critical Value: {result.cvt[i, 1]})')
            if result.lr1[i] > result.cvt[i, 1]:
                print(f'Cointegration exists at r <= {i}')
        print('\nEigenvalue Statistic:')
        for i in range(len(result.lr2)):
            print(f'r <= {i}: {result.lr2[i]} (Critical Value: {result.cvm[i, 1]})')
            if result.lr2[i] > result.cvm[i, 1]:
                print(f'Cointegration exists at r <= {i}')

    print("\n=== Johansen Cointegration Test (3-Minute Data) ===")
    johansen_coint_test(data_3min[['TSLA', 'NVDA', 'AAPL']])

    print("\n=== Johansen Cointegration Test (1-Minute Data) ===")
    johansen_coint_test(data_1min[['TSLA', 'NVDA', 'AAPL']])

    # Visualize the closing prices
    plt.figure(figsize=(12, 6))
    for stock in data_3min.columns:
        plt.plot(data_3min[stock], label=f'{stock} (3-min)')
    plt.title('Closing Prices (3-Minute Data)')
    plt.legend()
    plt.show()

    plt.figure(figsize=(12, 6))
    for stock in data_1min.columns:
        plt.plot(data_1min[stock], label=f'{stock} (1-min)')
    plt.title('Closing Prices (1-Minute Data)')
    plt.legend()
    plt.show()